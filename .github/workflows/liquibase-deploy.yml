name: Liquibase - AlloyDB via Auth Proxy

on:
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION:     ${{ secrets.ALLOYDB_REGION }}
      CLUSTER:    ${{ secrets.ALLOYDB_CLUSTER }}
      INSTANCE:   ${{ secrets.ALLOYDB_INSTANCE }}
      DB_NAME:    ${{ secrets.ALLOYDB_DATABASE }}
      DB_USER:    ${{ secrets.ALLOYDB_DB_USER }}
      DB_PASS:    ${{ secrets.ALLOYDB_DB_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Authenticate to GCP (JSON key). Replace with WIF later if desired.
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 2) gcloud (for pre-checks)
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 486.0.0"

      # 3) IAM + instance sanity checks BEFORE starting proxy
      - name: Verify IAM (alloydb.client) and instance state
        shell: bash
        run: |
          set -euo pipefail
          echo "Project: $PROJECT_ID  Region: $REGION  Cluster: $CLUSTER  Instance: $INSTANCE"
          # Check API reach + list clusters (proves auth works)
          gcloud alloydb clusters list --region="$REGION" --project="$PROJECT_ID" >/dev/null
          # Describe instance and ensure RUNNING
          STATE="$(gcloud alloydb instances describe "$INSTANCE" --cluster="$CLUSTER" --region="$REGION" --project="$PROJECT_ID" --format='value(state)')"
          echo "AlloyDB instance state: $STATE"
          if [ "$STATE" != "READY" ] && [ "$STATE" != "RUNNING" ]; then
            echo "Instance is not RUNNING/READY. Current state: $STATE"; exit 1
          fi
          # Instance URI (IDs, not display names)
          echo "projects/$PROJECT_ID/locations/$REGION/clusters/$CLUSTER/instances/$INSTANCE" > instance_uri.txt
          cat instance_uri.txt

      # 4) Download AlloyDB Auth Proxy
      - name: Download AlloyDB Auth Proxy
        shell: bash
        run: |
          set -euo pipefail
          curl -sSL -o alloydb-auth-proxy "https://storage.googleapis.com/alloydb-auth-proxy/v1.11.0/alloydb-auth-proxy.linux.amd64"
          chmod +x alloydb-auth-proxy
          ./alloydb-auth-proxy --help >/dev/null 2>&1 || { echo "Proxy binary not runnable"; exit 1; }

      # 5) Start proxy on port 5432 and stream logs
      - name: Start AlloyDB Auth Proxy (port 5432)
        shell: bash
        run: |
          set -euo pipefail
          TARGET_URI="$(cat instance_uri.txt)"
          echo "Using instance URI: $TARGET_URI"
          echo '${{ secrets.GCP_SA_KEY }}' > sa.json
          chmod 600 sa.json

          ./alloydb-auth-proxy \
            --address=127.0.0.1 \
            --port=5432 \
            --credentials-file=sa.json \
            "$TARGET_URI" > proxy.log 2>&1 &

          echo $! > proxy.pid
          # Background tail to have live logs in the job (won't fail the job if tail exits)
          (tail -f proxy.log & echo $! > tail.pid) || true

          # Wait up to 30s for port to open; also bail if process dies
          for i in {1..30}; do
            if ! kill -0 "$(cat proxy.pid)" 2>/dev/null; then
              echo "Proxy process exited unexpectedly:"
              sed -n '1,200p' proxy.log || true
              exit 1
            fi
            (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 && { echo "Proxy is up"; break; }
            sleep 1
          done
          (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 || { echo "Port 5432 not open"; sed -n '1,200p' proxy.log || true; exit 1; }

      # 6) Prove DB connectivity with psql BEFORE Liquibase
      - name: Install psql and test connectivity
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          # If this fails, the proxy log above will show the exact reason (IAM/URI/etc.)
          PGPASSWORD="$DB_PASS" psql \
            "host=127.0.0.1 port=5432 dbname=$DB_NAME user=$DB_USER sslmode=disable" \
            -c '\conninfo'

      # 7) Liquibase CLI
      - name: Setup Liquibase CLI
        uses: liquibase/setup-liquibase@v1
        with:
          version: "4.33.0"
          edition: "oss"

      # 8) PostgreSQL JDBC driver for Liquibase
      - name: Download PostgreSQL JDBC driver
        shell: bash
        run: |
          set -euo pipefail
          curl -sSL -o postgresql.jar "https://jdbc.postgresql.org/download/postgresql-42.7.4.jar"
          test -f postgresql.jar

      # 9) Liquibase update via proxy
      - name: Liquibase update
        shell: bash
        env:
          LIQUIBASE_URL: jdbc:postgresql://127.0.0.1:5432/${{ env.DB_NAME }}?sslmode=disable
          LIQUIBASE_LOG_LEVEL: info
        run: |
          set -euo pipefail
          liquibase \
            --url="${LIQUIBASE_URL}" \
            --username="${DB_USER}" \
            --password="${DB_PASS}" \
            --changelog-file="changelogs/db.changelog-master.xml" \
            --classpath="${{ github.workspace }}/postgresql.jar" \
            --log-level="${LIQUIBASE_LOG_LEVEL}" \
            update

      # 10) On failure, dump full proxy logs
      - name: Show proxy logs on failure
        if: failure()
        run: |
          echo "===== AlloyDB Auth Proxy Logs ====="
          sed -n '1,200p' proxy.log || true

      # 11) Always stop proxy and tail
      - name: Stop proxy
        if: always()
        run: |
          if [ -f tail.pid ]; then kill "$(cat tail.pid)" || true; fi
          if [ -f proxy.pid ]; then kill "$(cat proxy.pid)" || true; fi
