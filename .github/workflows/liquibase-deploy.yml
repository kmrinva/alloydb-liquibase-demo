name: Liquibase â†’ AlloyDB via Auth Proxy

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION:     ${{ secrets.ALLOYDB_REGION }}          # e.g., us-central1
      CLUSTER:    ${{ secrets.ALLOYDB_CLUSTER }}         # e.g., my-cluster
      INSTANCE:   ${{ secrets.ALLOYDB_INSTANCE }}        # e.g., primary-instance
      DB_NAME:    ${{ secrets.ALLOYDB_DATABASE }}        # e.g., appdb
      DB_USER:    ${{ secrets.ALLOYDB_DB_USER }}         # e.g., alloydbuser
      DB_PASSWORD: ${{ secrets.ALLOYDB_DB_PASSWORD }}    # optional if using IAM auth inside Postgres
      # Canonical AlloyDB instance URI
      ALLOYDB_INSTANCE_URI: projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.ALLOYDB_REGION }}/clusters/${{ secrets.ALLOYDB_CLUSTER }}/instances/${{ secrets.ALLOYDB_INSTANCE }}
      # Liquibase connects to local proxy
      LIQUIBASE_URL: jdbc:postgresql://127.0.0.1:5432/${{ secrets.ALLOYDB_DATABASE }}?sslmode=disable

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Authenticate FIRST (critical)
      - name: Authenticate to GCP (JSON key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # (Optional) Install gcloud if you want to run `gcloud ...` checks later
      - name: Setup gcloud CLI (optional)
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 486.0.0"

      # 2) Download proxy and show version
      - name: Download AlloyDB Auth Proxy
        shell: bash
        run: |
          set -euo pipefail
          curl -sSL -o alloydb-auth-proxy "https://storage.googleapis.com/alloydb-auth-proxy/v1.11.0/alloydb-auth-proxy.linux.amd64"
          chmod +x alloydb-auth-proxy
          ./alloydb-auth-proxy --version

      # 3) Start proxy in background (verbose) and WAIT for port
      - name: Start AlloyDB Auth Proxy (debug logs, port 6543)
        shell: bash
        env:
          TARGET_URI: projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.ALLOYDB_REGION }}/clusters/${{ secrets.ALLOYDB_CLUSTER }}/instances/${{ secrets.ALLOYDB_INSTANCE }}
        run: |
          set -euo pipefail
          echo "Using instance URI: $TARGET_URI"
          echo '${{ secrets.GCP_SA_KEY }}' > sa.json
          chmod 600 sa.json

          # Start proxy (no --verbose; use --log-level=debug)
          ./alloydb-auth-proxy \
            --log-level=debug \
            --address=127.0.0.1 \
            --port=6543 \
            --credentials-file=sa.json \
            "$TARGET_URI" > proxy.log 2>&1 &

          echo $! > proxy.pid

          # Wait for port to open; fail early if process dies
          for i in {1..30}; do
            if ! kill -0 "$(cat proxy.pid)" 2>/dev/null; then
              echo "Proxy process exited unexpectedly:"
              sed -n '1,200p' proxy.log || true
              exit 1
            fi
            (echo > /dev/tcp/127.0.0.1/6543) >/dev/null 2>&1 && echo "Proxy is up" && break
             sleep 1
           done

           (echo > /dev/tcp/127.0.0.1/6543) >/dev/null 2>&1 || { echo "Port 6543 not open"; sed -n '1,200p' proxy.log || true; exit 1; }
           tail -n 50 proxy.log || true

      # 4) Quick connectivity proof with psql (before Liquibase)
      - name: Install psql and test connectivity
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          PGPASSWORD='${{ secrets.ALLOYDB_DB_PASSWORD }}' psql \
            "host=127.0.0.1 port=6543 dbname=${{ secrets.ALLOYDB_DATABASE }} user=${{ secrets.ALLOYDB_DB_USER }} sslmode=disable" \
            -c '\conninfo'

      # 5) Liquibase + JDBC driver
      - name: Setup Liquibase CLI (v4.33.0 OSS)
        uses: liquibase/setup-liquibase@v1
        with:
          version: "4.33.0"
          edition: "oss"

      - name: Download PostgreSQL JDBC driver
        run: curl -sSL -o postgresql.jar "https://jdbc.postgresql.org/download/postgresql-42.7.4.jar"

      - name: Liquibase update (via proxy on 5432)
        shell: bash
        env:
          LIQUIBASE_URL: jdbc:postgresql://127.0.0.1:5432/${{ secrets.ALLOYDB_DATABASE }}?sslmode=disable
          DB_USER: ${{ secrets.ALLOYDB_DB_USER }}
          DB_PASSWORD: ${{ secrets.ALLOYDB_DB_PASSWORD }}
          LIQUIBASE_LOG_LEVEL: info
        run: |
          set -euo pipefail
          liquibase \
            --url="${LIQUIBASE_URL}" \
            --username="${DB_USER}" \
            --password="${DB_PASSWORD}" \
            --changelog-file="changelogs/db.changelog-master.xml" \
            --classpath="${{ github.workspace }}/postgresql.jar" \
            --log-level="${LIQUIBASE_LOG_LEVEL}" \
            update

      # 6) If anything failed, dump proxy logs
      - name: Show proxy logs on failure
        if: failure()
        run: |
          echo "===== AlloyDB Auth Proxy Logs ====="
          sed -n '1,200p' proxy.log || true

      - name: Stop proxy
        if: always()
        run: |
          if [ -f proxy.pid ]; then kill "$(cat proxy.pid)" || true; fi
