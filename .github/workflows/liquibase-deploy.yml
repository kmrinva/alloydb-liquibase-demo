name: Liquibase → AlloyDB via Auth Proxy Claude

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: ${{ secrets.ALLOYDB_REGION }}
      CLUSTER: ${{ secrets.ALLOYDB_CLUSTER }}
      INSTANCE: ${{ secrets.ALLOYDB_INSTANCE }}
      DB_NAME: ${{ secrets.ALLOYDB_DATABASE }}
      DB_USER: ${{ secrets.ALLOYDB_DB_USER }}
      DB_PASSWORD: ${{ secrets.ALLOYDB_DB_PASSWORD }}
      # Use consistent port throughout
      PROXY_PORT: 5432
      LIQUIBASE_URL: jdbc:postgresql://127.0.0.1:5432/${{ secrets.ALLOYDB_DATABASE }}?sslmode=disable

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Authenticate with proper scopes
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          # Ensure service account has these roles:
          # - Cloud AlloyDB Client
          # - Cloud SQL Client (sometimes needed)

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: "latest"

      # 2) Download correct AlloyDB Auth Proxy version
      - name: Download AlloyDB Auth Proxy
        shell: bash
        run: |
          set -euo pipefail
          
          # Use latest version - check https://github.com/GoogleCloudPlatform/alloydb-auth-proxy/releases
          PROXY_VERSION="v1.8.0"  # Update to latest available version
          
          # Download for linux-amd64
          curl -sSL -o alloydb-auth-proxy \
            "https://github.com/GoogleCloudPlatform/alloydb-auth-proxy/releases/download/${PROXY_VERSION}/alloydb-auth-proxy.linux.amd64"
          
          chmod +x alloydb-auth-proxy
          ./alloydb-auth-proxy --version

      # 3) Start proxy with proper configuration
      - name: Start AlloyDB Auth Proxy
        shell: bash
        run: |
          set -euo pipefail
          
          # Build the instance connection name
          INSTANCE_URI="projects/${PROJECT_ID}/locations/${REGION}/clusters/${CLUSTER}/instances/${INSTANCE}"
          echo "Connecting to: ${INSTANCE_URI}"
          
          # Start proxy in background with consistent port
          ./alloydb-auth-proxy \
            --address=0.0.0.0 \
            --port=${PROXY_PORT} \
            --credentials-json=<(echo '${{ secrets.GCP_SA_KEY }}') \
            "${INSTANCE_URI}" > proxy.log 2>&1 &
          
          # Store PID for cleanup
          echo $! > proxy.pid
          
          # Wait for proxy to be ready (up to 60 seconds)
          echo "Waiting for proxy to start..."
          for i in {1..60}; do
            if ! kill -0 "$(cat proxy.pid)" 2>/dev/null; then
              echo "❌ Proxy process died unexpectedly"
              echo "=== Proxy Logs ==="
              cat proxy.log || true
              exit 1
            fi
            
            # Test if port is accepting connections
            if timeout 3 bash -c "</dev/tcp/127.0.0.1/${PROXY_PORT}" 2>/dev/null; then
              echo "✅ Proxy is ready on port ${PROXY_PORT}"
              break
            fi
            
            if [ $i -eq 60 ]; then
              echo "❌ Proxy failed to start within 60 seconds"
              echo "=== Proxy Logs ==="
              cat proxy.log || true
              exit 1
            fi
            
            sleep 1
          done

      # 4) Test connection with psql
      - name: Test database connectivity
        shell: bash
        run: |
          set -euo pipefail
          
          # Install PostgreSQL client
          sudo apt-get update -qq
          sudo apt-get install -y postgresql-client
          
          # Test connection
          echo "Testing database connection..."
          PGPASSWORD="${DB_PASSWORD}" psql \
            -h 127.0.0.1 \
            -p ${PROXY_PORT} \
            -d "${DB_NAME}" \
            -U "${DB_USER}" \
            -c "SELECT version();" \
            -c "\conninfo"

      # 5) Setup Liquibase with PostgreSQL driver
      - name: Setup Liquibase
        shell: bash
        run: |
          set -euo pipefail
          
          # Download Liquibase
          LIQUIBASE_VERSION="4.29.2"  # Use stable version
          curl -sSL -o liquibase.tar.gz \
            "https://github.com/liquibase/liquibase/releases/download/v${LIQUIBASE_VERSION}/liquibase-${LIQUIBASE_VERSION}.tar.gz"
          
          tar -xzf liquibase.tar.gz
          chmod +x liquibase
          
          # Download PostgreSQL JDBC driver
          curl -sSL -o postgresql.jar \
            "https://jdbc.postgresql.org/download/postgresql-42.7.4.jar"
          
          # Verify Liquibase installation
          ./liquibase --version

      # 6) Run Liquibase migration
      - name: Run Liquibase Update
        shell: bash
        run: |
          set -euo pipefail
          
          # Ensure changelog file exists
          if [ ! -f "changelogs/db.changelog-master.xml" ]; then
            echo "❌ Changelog file not found: changelogs/db.changelog-master.xml"
            echo "Available files:"
            find . -name "*.xml" -o -name "*changelog*" | head -10
            exit 1
          fi
          
          echo "Running Liquibase update..."
          ./liquibase \
            --url="${LIQUIBASE_URL}" \
            --username="${DB_USER}" \
            --password="${DB_PASSWORD}" \
            --changelog-file="changelogs/db.changelog-master.xml" \
            --classpath="$(pwd)/postgresql.jar" \
            --log-level=info \
            update
          
          echo "✅ Liquibase update completed successfully"

      # 7) Cleanup and error handling
      - name: Show proxy logs on failure
        if: failure()
        shell: bash
        run: |
          echo "=== AlloyDB Auth Proxy Logs ==="
          if [ -f proxy.log ]; then
            cat proxy.log
          else
            echo "No proxy.log file found"
          fi
          
          # Show process status
          echo "=== Process Status ==="
          ps aux | grep -E "(alloydb|liquibase)" | grep -v grep || true

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          # Kill proxy process
          if [ -f proxy.pid ] && kill -0 "$(cat proxy.pid)" 2>/dev/null; then
            echo "Stopping proxy process..."
            kill "$(cat proxy.pid)" || true
            sleep 2
            # Force kill if still running
            kill -9 "$(cat proxy.pid)" 2>/dev/null || true
          fi
          
          # Cleanup files
          rm -f proxy.pid proxy.log postgresql.jar liquibase.tar.gz sa.json || true